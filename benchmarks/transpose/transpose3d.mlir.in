#map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map1 = affine_map<(d0, d1, d2) -> (d2, d1, d0)>
module attributes {torch.debug_module_name = "Transpose"} {
  func.func @forward(%arg0: tensor<@in_shape@x@dtype@>) -> tensor<@out_shape@x@dtype@> {
    %0 = tensor.empty() : tensor<@out_shape@x@dtype@>
    %1 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<@in_shape@x@dtype@>) outs(%0 : tensor<@out_shape@x@dtype@>) {
    ^bb0(%in: @dtype@, %out: @dtype@):
      linalg.yield %in : @dtype@
    } -> tensor<@out_shape@x@dtype@>
    return %1 : tensor<@out_shape@x@dtype@>
  }
  func.func @main() {
    %0= arith.constant dense<1.3>:tensor<@in_shape@x@dtype@>
    %1 = call @forward(%0) : (tensor<@in_shape@x@dtype@>) -> tensor<@out_shape@x@dtype@>
    return
  }
}
