// NUMPLACEHOLDERS 2 NUMVARIANTS 9
// PLACEHOLDER OPID 0 1 18 19 20 21 23 24 25
// PLACEHOLDER RES 15.3 1.40441 13.1 2.2 2.1 28.82 287.076 10.9 5.95455
// op names: add atan2 maximum minimum modulo mult power subtract div
// RUN: %python_executable %imex_runner -i %s -f %p/ptensor.pp -e main -entry-point-result=void --shared-libs=%mlir_c_runner_utils --shared-libs=%mlir_runner_utils | FileCheck %s

func.func private @printMemrefF64(%ptr : tensor<*xf64>)

func.func @main() {
    %i5 = arith.constant 5 : index
    %c2 = arith.constant 2.2 : f64
    %c13 = arith.constant 13.1 : f64

    %0 = ptensor.create %i5 value %c13 {dtype = 0 : i8} : (index, f64) -> !ptensor.ptensor<?xf64>
    %1 = ptensor.create %i5 value %c2 {dtype = 0 : i8} : (index, f64) -> !ptensor.ptensor<?xf64>

    call @test_op(%0, %1) : (!ptensor.ptensor<?xf64>, !ptensor.ptensor<?xf64>) -> ()

    return
}

func.func @test_op(%a : !ptensor.ptensor<?xf64>, %b : !ptensor.ptensor<?xf64>) {
    %0 ="ptensor.ewbin"(%a, %b) {op = @OPID@ : i32} : (!ptensor.ptensor<?xf64>, !ptensor.ptensor<?xf64>) -> !ptensor.ptensor<?xf64>
    %1 = builtin.unrealized_conversion_cast %0 : !ptensor.ptensor<?xf64> to tensor<?xf64>
    %2 = tensor.cast %1 : tensor<?xf64> to tensor<*xf64>
    call @printMemrefF64(%2) : (tensor<*xf64>) -> ()
    // CHECK: Unranked Memref base@ = {{(0x)?[-9a-f]*}}
    // CHECK-SAME: rank = 1 offset = 0 sizes = [5] strides = [1] data =
    // CHECK-NEXT: [@RES@,  @RES@,  @RES@,  @RES@,  @RES@]

    return
}
