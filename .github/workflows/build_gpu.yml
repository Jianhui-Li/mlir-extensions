name: GPU Build

on:
  pull_request:
    branches:
      - main
      - upstream
      - 'dist-ndarray'
  workflow_dispatch:

jobs:
  build:
    if: github.repository == 'intel-innersource/frameworks.ai.mlir.mlir-extensions'
    runs-on: gpu
    timeout-minutes: 450

    env:
      TBB_VER: 2021.6.0
      LEVEL_ZERO_VER: v1.8.1
      HOME_DIR: /home/gta/actions-runner/_work/frameworks.ai.mlir.mlir-extensions/frameworks.ai.mlir.mlir-extensions/gpurefactorbuild
      HOME: /github/home
      TBB_URL_PREFIX: https://github.com/oneapi-src/oneTBB/releases/download/
      LLVM_SHA_FILE: llvm_version.txt

    steps:
      - name: Source Vars
        run: |
          mkdir -p $HOME_DIR
          cd $HOME_DIR
          rm -rf *
          source /opt/intel/oneapi/compiler/latest/env/vars.sh

      - uses: actions/checkout@v3
        with:
          repository: intel-innersource/frameworks.ai.mlir.mlir-extensions
          token: ${{secrets.WORKFLOW_TOKEN}}
          fetch-depth: 0
          path: ${{env.HOME_DIR}}/mlir-extensions

      - name: Setup Latest Level Zero
        shell: bash -l {0}
        run: |
          cd $HOME_DIR
          git clone https://github.com/oneapi-src/level-zero.git
          cd level-zero
          git checkout $LEVEL_ZERO_VER
          cd ..
          mkdir level-zero-build
          cd level-zero-build
          cmake ../level-zero -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../level-zero-install
          ninja install

      - name: Setup Cache Vars
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat ${{env.HOME_DIR}}/mlir-extensions/build_tools/llvm_version.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Echo LLVM Sha file
        run: echo ${{env.LLVM_SHA }}
      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ${{env.HOME_DIR}}/llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Build LLVM MLIR
      #  if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME_DIR/llvm-mlir
          cd $HOME_DIR/llvm-mlir
          np=`nproc`
          if [ -d "llvm-project" ]; then rm -rf llvm-project; fi
          git clone https://github.com/llvm/llvm-project
          export LLVM_SHA=`cat ../mlir-extensions/build_tools/llvm_version.txt`
          cd llvm-project
          git checkout $LLVM_SHA
          if [ -d "$HOME_DIR/mlir-extensions/build_tools/patches" ]; then git apply $HOME_DIR/mlir-extensions/build_tools/patches/*.patch; fi
          mkdir _build
          cd _build
          cmake ../llvm  -GNinja  -DCMAKE_BUILD_TYPE=Release  -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_RTTI=ON  -DLLVM_USE_LINKER=gold -DLLVM_INSTALL_UTILS=ON -DLLVM_ENABLE_ZSTD=OFF -DCMAKE_INSTALL_PREFIX=$HOME_DIR/llvm-mlir/_mlir_install
          cmake --build . -j ${np}
          cmake --install .

      - name: Setup IMEX
        run: |
          cd $HOME_DIR/mlir-extensions
          source /home/gta/anaconda3/bin/activate imex-dev
          mkdir build
          cd build
          export MLIR_DIR=$HOME_DIR/llvm-mlir/_mlir_install
          cmake .. -DIMEX_ENABLE_SYCL_RUNTIME=1 -DIMEX_ENABLE_L0_RUNTIME=1 -DSYCL_DIR=/home/nbpatel/intel/oneapi/compiler/2023.0.0/linux -DLEVEL_ZERO_DIR=$HOME_DIR/level-zero/level-zero-install/
          make -j64
          cp /home/gta/actions-runner/_work/frameworks.ai.mlir.mlir-extensions/frameworks.ai.mlir.mlir-extensions/gpurefactorbuild/llvm-mlir/llvm-project/_build/bin/llvm-lit /home/gta/actions-runner/_work/frameworks.ai.mlir.mlir-extensions/frameworks.ai.mlir.mlir-extensions/gpurefactorbuild/mlir-extensions/build/bin

      - name: Run Level Zero & Sycl Runtime Tests
        shell: bash -l {0}
        run: |
          source /opt/intel/oneapi/setvars.sh
          cd $HOME_DIR/mlir-extensions/build
          cmake --build . --target check-imex | tee tests.txt

          # /home/gta/anaconda3/envs/imex-dev/bin/python $HOME_DIR/mlir-extensions/build/bin/imex-runner.py -i $HOME_DIR/mlir-extensions/test/Integration/Dialect/Linalg/OpenCL/linalg_addf.mlir -e main --pass-pipeline-file=$HOME_DIR/mlir-extensions/test/Integration/Dialect/Linalg/OpenCL/linalg-to-gpux-opencl.pp -entry-point-result=void --shared-libs=$HOME_DIR/llvm-mlir/_mlir_install/lib/libmlir_runner_utils.so,$HOME_DIR/mlir-extensions/build/lib/liblevel-zero-runtime.so
      #- name: Run perf script
      #  run: |
      #    cd ${{env.HOME_DIR}}/mlir-extensions/scripts
      #    ./run_perf_test.sh

      - name: Upload tests.txt
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: tests.txt
          path: ${{env.HOME_DIR}}/mlir-extensions/build/tests.txt

      - name: Upload report.txt
        uses: actions/upload-artifact@v2
        with:
          name: report.txt
          path: ${{env.HOME_DIR}}/mlir-extensions/scripts/report.txt
